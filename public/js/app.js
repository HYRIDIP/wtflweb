class WaterFallApp {
  constructor() {
    this.tg = window.Telegram?.WebApp;
    this.socket = null;
    this.currentUser = null;
    this.marketData = null;
    this.cryptos = ['MINT', 'RWK', 'SKH', 'WTFL', 'CULT'];
    this.isInitialized = false;
    
    this.init();
  }
  
  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WaterFall App...');
      
      if (this.tg) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        this.tg.ready();
        this.tg.expand();
        this.tg.enableClosingConfirmation();
        this.tg.setHeaderColor('#1e2329');
        this.tg.setBackgroundColor('#070707');
        
        console.log('üì± Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const telegramUser = this.tg.initDataUnsafe?.user;
        
        if (telegramUser) {
          console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', telegramUser);
          await this.handleTelegramUser(telegramUser);
        } else {
          console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          this.handleNoUserData();
        }
      } else {
        console.log('üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–µ Telegram)');
        this.handleBrowserMode();
      }
      
      this.isInitialized = true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
  }
  
  async handleTelegramUser(telegramData) {
    try {
      this.currentUser = {
        id: telegramData.id.toString(),
        username: telegramData.username || `User${telegramData.id.toString().slice(-4)}`,
        firstName: telegramData.first_name || '',
        lastName: telegramData.last_name || '',
        photoUrl: telegramData.photo_url || '',
        languageCode: telegramData.language_code || 'en',
        isPremium: telegramData.is_premium || false,
        telegramData: telegramData
      };
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', this.currentUser.username);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
      await this.connectToServer();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–µ–π—Å—Ç–≤—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
      const currentPage = this.getCurrentPage();
      console.log('üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', currentPage);
      
      switch (currentPage) {
        case 'login':
        case 'loading':
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—à–µ–ª–µ–∫
          setTimeout(() => this.showWallet(), 500);
          break;
        case 'other':
          // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∏–¥–µ–º –≤ –∫–æ—à–µ–ª–µ–∫
          this.showWallet();
          break;
        default:
          // –î–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∫–æ—à–µ–ª—å–∫–∞ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –Ω–∏—Ö
          this.updateUI();
          break;
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
  }
  
  handleNoUserData() {
    const currentPage = this.getCurrentPage();
    if (currentPage !== 'login' && currentPage !== 'loading') {
      this.showLogin();
    }
  }
  
  handleBrowserMode() {
    // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    this.currentUser = {
      id: 'dev_' + Date.now(),
      username: 'DemoUser',
      firstName: 'Demo',
      lastName: 'User',
      photoUrl: '',
      balance: 1000,
      crypto: { MINT: 10, RWK: 100, SKH: 1000, WTFL: 5, CULT: 50 }
    };
    
    this.connectToServer();
    
    const currentPage = this.getCurrentPage();
    if (currentPage === 'login' || currentPage === 'loading') {
      this.showWallet();
    } else {
      this.updateUI();
    }
  }
  
  getCurrentPage() {
    const path = window.location.pathname;
    const page = path.split('/').pop() || 'login.html';
    
    if (page === 'login.html' || page === '' || page === '/') return 'login';
    if (page === 'loading.html') return 'loading';
    if (page === 'wallet.html') return 'wallet';
    if (page.includes('trading-')) return 'trading';
    if (page === 'deposit.html') return 'deposit';
    if (page === 'withdraw.html') return 'withdraw';
    return 'other';
  }
  
  async connectToServer() {
    try {
      if (!this.currentUser) {
        throw new Error('No user data to connect');
      }
      
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
      this.socket = io();
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.io
      this.setupSocketHandlers();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (this.currentUser.telegramData) {
        this.socket.emit('join', this.currentUser.telegramData);
      } else {
        // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.socket.emit('join', {
          id: this.currentUser.id,
          username: this.currentUser.username,
          first_name: this.currentUser.firstName
        });
      }
      
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
  }
  
  setupSocketHandlers() {
    this.socket.on('userData', (userData) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      this.currentUser = { ...this.currentUser, ...userData };
      this.updateUI();
    });
    
    this.socket.on('marketData', (data) => {
      console.log('üìà –ü–æ–ª—É—á–µ–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      this.marketData = data;
      this.updateCharts();
      this.updatePrices();
      this.updateHoldings();
    });
    
    this.socket.on('marketUpdate', (data) => {
      if (this.marketData) {
        this.marketData.prices[data.crypto] = data.price;
        this.updatePrices();
        this.updateHoldings();
      }
    });
    
    this.socket.on('orderExecuted', (data) => {
      this.showNotification(
        `‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: ${data.type === 'buy' ? '–ü–û–ö–£–ü–ö–ê' : '–ü–†–û–î–ê–ñ–ê'} ${data.amount} ${data.crypto} –ø–æ $${data.price.toFixed(4)}`,
        'success'
      );
    });
    
    this.socket.on('depositSuccess', (data) => {
      this.showNotification(
        `üí∞ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–µ–Ω! $${data.amount} –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å`,
        'success'
      );
      if (this.currentUser) {
        this.currentUser.balance = data.newBalance;
      }
      this.updateUI();
    });
    
    this.socket.on('marketTrade', (data) => {
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      console.log('üí± –†—ã–Ω–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞:', data);
    });
    
    this.socket.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error);
      this.showNotification(`–û—à–∏–±–∫–∞: ${error}`, 'error');
    });
    
    this.socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
    
    this.socket.on('disconnect', (reason) => {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
      if (reason === 'io server disconnect') {
        this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
      }
    });
    
    this.socket.on('reconnect', () => {
      console.log('üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É');
      this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    });
  }
  
  updateUI() {
    if (!this.currentUser) return;
    
    console.log('üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    const avatarEl = document.getElementById('userAvatar');
    if (avatarEl) {
      if (this.currentUser.photoUrl) {
        avatarEl.src = this.currentUser.photoUrl;
        avatarEl.style.display = 'block';
      } else {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        avatarEl.src = '/assets/homepage/unsplash-p-at-a8xe.png';
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nameEl = document.getElementById('userName');
    if (nameEl) {
      const displayName = this.currentUser.firstName || this.currentUser.username || '–¢—Ä–µ–π–¥–µ—Ä';
      nameEl.textContent = `–ü—Ä–∏–≤–µ—Ç, ${displayName}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    this.updateBalance();
    this.updateHoldings();
  }
  
  updateBalance() {
    const balanceEl = document.getElementById('userBalance');
    if (balanceEl) {
      balanceEl.textContent = `$${(this.currentUser.balance || 0).toFixed(2)}`;
    }
    
    const availableBalanceEl = document.getElementById('availableBalance');
    if (availableBalanceEl) {
      availableBalanceEl.textContent = `$${(this.currentUser.balance || 0).toFixed(2)}`;
    }
    
    const currentBalanceEl = document.getElementById('currentBalance');
    if (currentBalanceEl) {
      currentBalanceEl.textContent = `$${(this.currentUser.balance || 0).toFixed(2)}`;
    }
  }
  
  updateHoldings() {
    if (!this.currentUser || !this.marketData) return;
    
    this.cryptos.forEach(crypto => {
      const amount = this.currentUser.crypto?.[crypto] || 0;
      const price = this.marketData.prices?.[crypto] || 0;
      const value = amount * price;
      const change = this.getPriceChange(crypto);
      
      const container = document.getElementById(`holding-${crypto}`);
      if (container) {
        container.innerHTML = `
          <p class="text-gray2">${amount.toFixed(2)} ${crypto}</p>
          <p class="text-white1">$${value.toFixed(2)}</p>
          ${change !== 0 ? `
            <p class="${change > 0 ? 'text-profit' : 'text-loss'}">
              ${change > 0 ? '‚Üó' : '‚Üò'} ${Math.abs(change).toFixed(1)}%
            </p>
          ` : ''}
        `;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
      const cryptoBalanceEl = document.getElementById('cryptoBalance');
      if (cryptoBalanceEl && this.getCurrentPage() === 'trading') {
        cryptoBalanceEl.textContent = amount.toFixed(4);
      }
    });
  }
  
  updateCharts() {
    if (!this.marketData) return;
    
    this.cryptos.forEach(crypto => {
      const history = this.marketData.history?.[crypto];
      if (history && history.length > 0) {
        this.drawMiniChart(`chart-${crypto}`, history.slice(-20));
      }
    });
  }
  
  updatePrices() {
    if (!this.marketData) return;
    
    this.cryptos.forEach(crypto => {
      const priceElement = document.getElementById(`price-${crypto}`);
      if (priceElement) {
        const price = this.marketData.prices?.[crypto] || 0;
        const change = this.getPriceChange(crypto);
        
        priceElement.innerHTML = `
          $${price.toFixed(4)}
          ${change !== 0 ? `
            <span class="${change > 0 ? 'price-up' : 'price-down'}">
              ${change > 0 ? '‚Üó' : '‚Üò'} ${Math.abs(change).toFixed(1)}%
            </span>
          ` : ''}
        `;
      }
    });
  }
  
  getPriceChange(crypto) {
    if (!this.marketData?.history?.[crypto] || this.marketData.history[crypto].length < 2) {
      return 0;
    }
    
    const history = this.marketData.history[crypto];
    const current = history[history.length - 1].price;
    const previous = history[Math.max(0, history.length - 10)].price;
    
    return ((current - previous) / previous) * 100;
  }
  
  drawMiniChart(canvasId, data) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    
    ctx.clearRect(0, 0, width, height);
    
    if (data.length < 2) return;
    
    const prices = data.map(d => d.price);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const range = maxPrice - minPrice || 1;
    
    ctx.beginPath();
    ctx.lineWidth = 2;
    
    const isPositive = prices[prices.length - 1] > prices[0];
    ctx.strokeStyle = isPositive ? '#00b15e' : '#f6465d';
    
    data.forEach((point, index) => {
      const x = (index / (data.length - 1)) * width;
      const y = height - ((point.price - minPrice) / range) * height;
      
      if (index === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    });
    
    ctx.stroke();
  }
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  showLogin() {
    window.location.href = 'login.html';
  }
  
  showLoading() {
    window.location.href = 'loading.html';
  }
  
  showWallet() {
    window.location.href = 'wallet.html';
  }
  
  showTradingPage(crypto) {
    const cryptoPages = {
      'MINT': 'trading-MINT.html',
      'RWK': 'trading-RWK.html', 
      'SKH': 'trading-SKH.html',
      'WTFL': 'trading-WTFL.html',
      'CULT': 'trading-CULT.html'
    };
    
    const page = cryptoPages[crypto];
    if (page) {
      window.location.href = page;
    } else {
      this.showNotification('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
    }
  }
  
  showDeposit() {
    window.location.href = 'deposit.html';
  }
  
  showWithdraw() {
    window.location.href = 'withdraw.html';
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
    
    if (this.tg && this.tg.showPopup) {
      if (type === 'error') {
        this.tg.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: message,
          buttons: [{ type: 'ok' }]
        });
      } else {
        this.tg.showAlert(message);
      }
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      alert(message);
    }
  }
  
  // API –≤—ã–∑–æ–≤—ã
  async createOrder(crypto, type, price, amount) {
    try {
      if (!this.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      
      const response = await fetch('/api/order/create', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.currentUser.id,
          crypto: crypto,
          type: type,
          price: parseFloat(price),
          amount: parseFloat(amount)
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        this.showNotification('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
        return true;
      } else {
        this.showNotification(`‚ùå ${result.error}`, 'error');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error);
      this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
      return false;
    }
  }
  
  async createDeposit(amount) {
    try {
      if (!this.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      
      const response = await fetch('/api/deposit/create', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.currentUser.id,
          amount: parseFloat(amount)
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ Telegram
        if (this.tg && this.tg.openInvoice) {
          this.tg.openInvoice(result.invoiceUrl, (status) => {
            if (status === 'paid') {
              this.confirmDeposit(result.invoiceId);
            } else if (status === 'failed' || status === 'cancelled') {
              this.showNotification('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'error');
            }
          });
        } else {
          // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
          window.open(result.invoiceUrl, '_blank');
          this.showNotification('–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã', 'info');
        }
        
        return result.invoiceUrl;
      } else {
        this.showNotification(`‚ùå ${result.error}`, 'error');
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
      return null;
    }
  }
  
  async confirmDeposit(invoiceId) {
    try {
      const response = await fetch('/api/deposit/confirm', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.currentUser.id,
          invoiceId: invoiceId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        this.showNotification(`‚úÖ –î–µ–ø–æ–∑–∏—Ç $${result.amount} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!`, 'success');
        return true;
      } else {
        this.showNotification(`‚ùå ${result.error}`, 'error');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      return false;
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
  console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  app = new WaterFallApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function startTrading(crypto) {
  if (app && app.showTradingPage) {
    app.showTradingPage(crypto);
  } else {
    console.error('App not initialized');
  }
}

function goToDeposit() {
  if (app && app.showDeposit) {
    app.showDeposit();
  }
}

function goToWithdraw() {
  if (app && app.showWithdraw) {
    app.showWithdraw();
  }
}

function goToWallet() {
  if (app && app.showWallet) {
    app.showWallet();
  }
}
