class WaterFallApp {
  constructor() {
    this.tg = null;
    this.socket = null;
    this.currentUser = null;
    this.marketData = null;
    this.cryptos = ['MINT', 'RWK', 'SKH', 'WTFL', 'CULT'];
    this.isTelegram = false;
    
    this.init();
  }
  
  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WaterFall App...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Web App
      await this.initTelegram();
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.initUser();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
      await this.connectToServer();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      this.updateUI();
      
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
  }
  
  async initTelegram() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram Web App
    if (window.Telegram && window.Telegram.WebApp) {
      this.tg = window.Telegram.WebApp;
      this.isTelegram = true;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
      this.tg.ready();
      this.tg.expand();
      this.tg.enableClosingConfirmation();
      this.tg.setHeaderColor('#1e2329');
      this.tg.setBackgroundColor('#070707');
      
      console.log('üì± Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.log('üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–µ Telegram)');
      this.isTelegram = false;
    }
  }
  
  async initUser() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const savedUser = localStorage.getItem('telegramUser');
    const isTelegramSaved = localStorage.getItem('isTelegram') === 'true';
    
    if (savedUser && isTelegramSaved) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const userData = JSON.parse(savedUser);
      this.currentUser = this.createUserObject(userData, true);
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage:', this.currentUser.username);
    } else if (this.isTelegram && this.tg.initDataUnsafe?.user) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
      const telegramUser = this.tg.initDataUnsafe.user;
      this.currentUser = this.createUserObject(telegramUser, true);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      localStorage.setItem('telegramUser', JSON.stringify(telegramUser));
      localStorage.setItem('isTelegram', 'true');
      
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram:', this.currentUser.username);
    } else {
      // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.currentUser = this.createDemoUser();
      console.log('üë§ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', this.currentUser.username);
    }
  }
  
  createUserObject(userData, isRealUser = false) {
    return {
      id: userData.id.toString(),
      username: userData.username || `User${userData.id.toString().slice(-4)}`,
      firstName: userData.first_name || '',
      lastName: userData.last_name || '',
      photoUrl: userData.photo_url || '/assets/homepage/unsplash-p-at-a8xe.png',
      balance: isRealUser ? 0 : 1000, // –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      crypto: isRealUser ? 
        { MINT: 0, RWK: 0, SKH: 0, WTFL: 0, CULT: 0 } :
        { MINT: 10, RWK: 100, SKH: 1000, WTFL: 5, CULT: 50 },
      totalInvested: 0,
      firstLogin: isRealUser,
      isRealUser: isRealUser,
      telegramData: userData
    };
  }
  
  createDemoUser() {
    return {
      id: 'demo_' + Date.now(),
      username: 'DemoTrader',
      firstName: 'Demo',
      lastName: 'User',
      photoUrl: '/assets/homepage/unsplash-p-at-a8xe.png',
      balance: 1000,
      crypto: { MINT: 10, RWK: 100, SKH: 1000, WTFL: 5, CULT: 50 },
      totalInvested: 1000,
      firstLogin: false,
      isRealUser: false,
      telegramData: null
    };
  }
  
  async connectToServer() {
    try {
      if (!this.currentUser) {
        throw new Error('No user data to connect');
      }
      
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º Socket.io
      this.socket = io();
      this.setupSocketHandlers();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const userDataToSend = this.currentUser.isRealUser ? 
        this.currentUser.telegramData : 
        {
          id: this.currentUser.id,
          username: this.currentUser.username,
          first_name: this.currentUser.firstName,
          last_name: this.currentUser.lastName
        };
      
      this.socket.emit('join', userDataToSend);
      
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
  }
  
  setupSocketHandlers() {
    this.socket.on('userData', (userData) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (userData && userData.id === this.currentUser.id) {
        this.currentUser.balance = userData.balance || this.currentUser.balance;
        this.currentUser.crypto = userData.crypto || this.currentUser.crypto;
        this.currentUser.totalInvested = userData.totalInvested || this.currentUser.totalInvested;
        
        this.updateUI();
      }
    });
    
    this.socket.on('marketData', (data) => {
      console.log('üìà –ü–æ–ª—É—á–µ–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      this.marketData = data;
      this.updateCharts();
      this.updatePrices();
      this.updateHoldings();
    });
    
    this.socket.on('marketUpdate', (data) => {
      if (this.marketData && data.crypto) {
        this.marketData.prices[data.crypto] = data.price;
        this.updatePrices();
        this.updateHoldings();
      }
    });
    
    this.socket.on('orderExecuted', (data) => {
      this.showNotification(
        `‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: ${data.type === 'buy' ? '–ü–û–ö–£–ü–ö–ê' : '–ü–†–û–î–ê–ñ–ê'} ${data.amount} ${data.crypto} –ø–æ $${data.price.toFixed(4)}`,
        'success'
      );
    });
    
    this.socket.on('depositSuccess', (data) => {
      this.showNotification(
        `üí∞ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–µ–Ω! $${data.amount} –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å`,
        'success'
      );
      if (this.currentUser) {
        this.currentUser.balance = data.newBalance;
        this.updateUI();
      }
    });
    
    this.socket.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error);
      this.showNotification(`–û—à–∏–±–∫–∞: ${error}`, 'error');
    });
    
    this.socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
    
    this.socket.on('disconnect', (reason) => {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
    });
  }
  
  updateUI() {
    if (!this.currentUser) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    const avatarEl = document.getElementById('userAvatar');
    if (avatarEl && this.currentUser.photoUrl) {
      avatarEl.src = this.currentUser.photoUrl;
      avatarEl.style.display = 'block';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nameEl = document.getElementById('userName');
    if (nameEl) {
      const displayName = this.currentUser.firstName || this.currentUser.username || '–¢—Ä–µ–π–¥–µ—Ä';
      nameEl.textContent = `–ü—Ä–∏–≤–µ—Ç, ${displayName}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    this.updateBalance();
    this.updateHoldings();
  }
  
  updateBalance() {
    const balanceElements = [
      'userBalance',
      'availableBalance', 
      'currentBalance',
      'usdBalance'
    ];
    
    balanceElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = `$${(this.currentUser.balance || 0).toFixed(2)}`;
      }
    });
  }
  
  updateHoldings() {
    if (!this.currentUser || !this.marketData) return;
    
    this.cryptos.forEach(crypto => {
      const amount = this.currentUser.crypto?.[crypto] || 0;
      const price = this.marketData.prices?.[crypto] || 0;
      const value = amount * price;
      const change = this.getPriceChange(crypto);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ–ª–¥–∏–Ω–≥–∏ –≤ –∫–æ—à–µ–ª—å–∫–µ
      const container = document.getElementById(`holding-${crypto}`);
      if (container) {
        container.innerHTML = `
          <p class="text-gray2">${amount.toFixed(2)} ${crypto}</p>
          <p class="text-white1">$${value.toFixed(2)}</p>
          ${change !== 0 ? `
            <p class="${change > 0 ? 'text-profit' : 'text-loss'}">
              ${change > 0 ? '‚Üó' : '‚Üò'} ${Math.abs(change).toFixed(1)}%
            </p>
          ` : ''}
        `;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
      const cryptoBalanceEl = document.getElementById('cryptoBalance');
      if (cryptoBalanceEl) {
        cryptoBalanceEl.textContent = amount.toFixed(4);
      }
    });
  }
  
  updateCharts() {
    if (!this.marketData) return;
    
    this.cryptos.forEach(crypto => {
      const history = this.marketData.history?.[crypto];
      if (history && history.length > 0) {
        this.drawMiniChart(`chart-${crypto}`, history.slice(-20));
      }
    });
  }
  
  updatePrices() {
    if (!this.marketData) return;
    
    this.cryptos.forEach(crypto => {
      const priceElement = document.getElementById(`price-${crypto}`);
      if (priceElement) {
        const price = this.marketData.prices?.[crypto] || 0;
        const change = this.getPriceChange(crypto);
        
        priceElement.innerHTML = `
          $${price.toFixed(4)}
          ${change !== 0 ? `
            <span class="${change > 0 ? 'price-up' : 'price-down'}">
              ${change > 0 ? '‚Üó' : '‚Üò'} ${Math.abs(change).toFixed(1)}%
            </span>
          ` : ''}
        `;
      }
    });
  }
  
  getPriceChange(crypto) {
    if (!this.marketData?.history?.[crypto] || this.marketData.history[crypto].length < 2) {
      return 0;
    }
    
    const history = this.marketData.history[crypto];
    const current = history[history.length - 1].price;
    const previous = history[Math.max(0, history.length - 10)].price;
    
    return ((current - previous) / previous) * 100;
  }
  
  drawMiniChart(canvasId, data) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    
    ctx.clearRect(0, 0, width, height);
    
    if (data.length < 2) return;
    
    const prices = data.map(d => d.price);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const range = maxPrice - minPrice || 1;
    
    ctx.beginPath();
    ctx.lineWidth = 2;
    
    const isPositive = prices[prices.length - 1] > prices[0];
    ctx.strokeStyle = isPositive ? '#00b15e' : '#f6465d';
    
    data.forEach((point, index) => {
      const x = (index / (data.length - 1)) * width;
      const y = height - ((point.price - minPrice) / range) * height;
      
      if (index === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    });
    
    ctx.stroke();
  }
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  showTradingPage(crypto) {
    const cryptoPages = {
      'MINT': 'trading-MINT.html',
      'RWK': 'trading-RWK.html', 
      'SKH': 'trading-SKH.html',
      'WTFL': 'trading-WTFL.html',
      'CULT': 'trading-CULT.html'
    };
    
    const page = cryptoPages[crypto];
    if (page) {
      window.location.href = page;
    } else {
      this.showNotification('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
    }
  }
  
  showDeposit() {
    window.location.href = 'deposit.html';
  }
  
  showWithdraw() {
    window.location.href = 'withdraw.html';
  }
  
  showWallet() {
    window.location.href = 'wallet.html';
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
    
    if (this.tg && this.tg.showPopup) {
      if (type === 'error') {
        this.tg.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: message,
          buttons: [{ type: 'ok' }]
        });
      } else {
        this.tg.showAlert(message);
      }
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      alert(message);
    }
  }
  
  // API –≤—ã–∑–æ–≤—ã
  async createOrder(crypto, type, price, amount) {
    try {
      if (!this.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      
      const response = await fetch('/api/order/create', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.currentUser.id,
          crypto: crypto,
          type: type,
          price: parseFloat(price),
          amount: parseFloat(amount)
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        this.showNotification('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
        return true;
      } else {
        this.showNotification(`‚ùå ${result.error}`, 'error');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error);
      this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
      return false;
    }
  }
  
  async createDeposit(amount) {
    try {
      if (!this.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      
      const response = await fetch('/api/deposit/create', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: this.currentUser.id,
          amount: parseFloat(amount)
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        if (this.tg && this.tg.openInvoice) {
          // –í Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É
          this.tg.openInvoice(result.invoiceUrl, (status) => {
            if (status === 'paid') {
              this.showNotification('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!', 'success');
            }
          });
        } else {
          // –í –±—Ä–∞—É–∑–µ—Ä–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
          window.open(result.invoiceUrl, '_blank');
        }
        
        return result.invoiceUrl;
      } else {
        this.showNotification(`‚ùå ${result.error}`, 'error');
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
      return null;
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
  console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  app = new WaterFallApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function startTrading(crypto) {
  if (app && app.showTradingPage) {
    app.showTradingPage(crypto);
  }
}

function goToDeposit() {
  if (app && app.showDeposit) {
    app.showDeposit();
  }
}

function goToWithdraw() {
  if (app && app.showWithdraw) {
    app.showWithdraw();
  }
}

function goToWallet() {
  if (app && app.showWallet) {
    app.showWallet();
  }
}

function placeOrder(type, orderType) {
  if (window.tradingManager) {
    window.tradingManager.placeOrder(type, orderType);
  }
}
